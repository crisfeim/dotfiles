<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>awaitwrapper</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//https://markoengelman.com/use-swifts-async-without-breaking-the-existing-codebase/
/// essential developper caio mike ios instructor profesor blog teacher wrapper struct originalmente  #snippets

typealias CompletionMethod&lt;T, E: Error&gt; = (_ completion: @escaping (Result&lt;T, E&gt;) -&gt; Void) -&gt; Void
typealias AsyncMethod&lt;T, E: Error&gt; = () async -&gt; Result&lt;T, E&gt;

/// Transforms a  completion based method into its async/await equivalent
/// - Parameters:
///     - method: The completion based method we want to async-awaitify
func awaitify&lt;T, E: Error&gt;
(method: @escaping CompletionMethod&lt;T, E&gt;) -&gt; AsyncMethod&lt;T, E&gt; {{
    await withCheckedContinuation { continuation in
        method() {
            continuation.resume(returning: $0)
        }
    }
}}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>60D2F0AE-9160-46E1-B643-115B6AE294EF</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Async await wrapper</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
